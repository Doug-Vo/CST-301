
Module java.sql
Package java.sql
Interface Connection


All Superinterfaces:
AutoCloseable, Wrapper


public interface Connection
extends Wrapper, AutoCloseable
A connection (session) with a specific
 database. SQL statements are executed and results are returned
 within the context of a connection.
 
 A Connection object's database is able to provide information
 describing its tables, its supported SQL grammar, its stored
 procedures, the capabilities of this connection, and so on. This
 information is obtained with the getMetaData method.

 Note: When configuring a Connection, JDBC applications
  should use the appropriate Connection method such as
  setAutoCommit or setTransactionIsolation.
  Applications should not invoke SQL commands directly to change the connection's
   configuration when there is a JDBC method available.  By default a Connection object is in
 auto-commit mode, which means that it automatically commits changes
 after executing each statement. If auto-commit mode has been
 disabled, the method commit must be called explicitly in
 order to commit changes; otherwise, database changes will not be saved.
 
 A new Connection object created using the JDBC 2.1 core API
 has an initially empty type map associated with it. A user may enter a
 custom mapping for a UDT in this type map.
 When a UDT is retrieved from a data source with the
 method ResultSet.getObject, the getObject method
 will check the connection's type map to see if there is an entry for that
 UDT.  If so, the getObject method will map the UDT to the
 class indicated.  If there is no entry, the UDT will be mapped using the
 standard mapping.
 
 A user may create a new type map, which is a java.util.Map
 object, make an entry in it, and pass it to the java.sql
 methods that can perform custom mapping.  In this case, the method
 will use the given type map instead of the one associated with
 the connection.
 
 For example, the following code fragment specifies that the SQL
 type ATHLETES will be mapped to the class
 Athletes in the Java programming language.
 The code fragment retrieves the type map for the Connection
  object con, inserts the entry into it, and then sets
 the type map with the new entry as the connection's type map.
 
      java.util.Map map = con.getTypeMap();
      map.put("mySchemaName.ATHLETES", Class.forName("Athletes"));
      con.setTypeMap(map);
 

Since:
1.1
See Also:


DriverManager.getConnection(java.lang.String, java.util.Properties)
Statement
ResultSet
DatabaseMetaData




Module java.sql
Package java.sql
Class SQLException


All Implemented Interfaces:
Serializable, Iterable<Throwable>


Direct Known Subclasses:
BatchUpdateException, RowSetWarning, SerialException, SQLClientInfoException, SQLNonTransientException, SQLRecoverableException, SQLTransientException, SQLWarning, SyncFactoryException, SyncProviderException


public class SQLException
extends Exception
implements Iterable<Throwable>
An exception that provides information on a database access
 error or other errors.

 Each SQLException provides several kinds of information:
 
 a string describing the error.  This is used as the Java Exception
       message, available via the method getMessage.
    a "SQLstate" string, which follows either the XOPEN SQLstate conventions
        or the SQL:2003 conventions.
       The values of the SQLState string are described in the appropriate spec.
       The DatabaseMetaData method getSQLStateType
       can be used to discover whether the driver returns the XOPEN type or
       the SQL:2003 type.
    an integer error code that is specific to each vendor.  Normally this will
       be the actual error code returned by the underlying database.
    a chain to a next Exception.  This can be used to provide additional
       error information.
    the causal relationship, if any for this SQLException.
 

Since:
1.1
See Also:


Serialized Form




Module java.sql
Package java.sql
Interface Statement


All Superinterfaces:
AutoCloseable, Wrapper


All Known Subinterfaces:
CallableStatement, PreparedStatement


public interface Statement
extends Wrapper, AutoCloseable
The object used for executing a static SQL statement
 and returning the results it produces.
 
 By default, only one ResultSet object per Statement
 object can be open at the same time. Therefore, if the reading of one
 ResultSet object is interleaved
 with the reading of another, each must have been generated by
 different Statement objects. All execution methods in the
 Statement interface implicitly close a current
 ResultSet object of the statement if an open one exists.

Since:
1.1
See Also:


Connection.createStatement()
ResultSet



